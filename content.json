[{"title":"html自定义字体","date":"2017-04-14T09:20:25.448Z","path":"blog/html自定义字体20170414/","text":"如果网页中不想使用系统默认的字体改怎么办，要么做图片，要么就用默认的，但是做图片的话有会很麻烦，这里@font-face帮您解决，这个东西最好只在英文中使用！因为中文字体太大了，这样会影响到项目的某些性能的优化！具体效果参照本站页面！ @font-face的语法规则： @font-face { font-family: &lt;YourWebFontName&gt;; src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*; [font-weight: &lt;weight&gt;]; [font-style: &lt;style&gt;]; } 取值说明 YourWebFontName:此值指的就是你自定义的字体名称，最好是使用你下载的默认字体，他将被引用到你的Web元素中的font-family。如“font-family:”YourWebFontName”;” source:此值指的是你自定义的字体的存放路径，可以是相对路径也可以是绝路径； format：此值指的是你自定义的字体的格式，主要用来帮助浏览器识别，其值主要有以下几种类型：truetype,opentype,truetype-aat,embedded-opentype,avg等； weight和style:这两个值大家一定很熟悉，weight定义字体是否为粗体，style主要定义字体样式，如斜体。 兼容浏览器 说到浏览器对@font-face的兼容问题，这里涉及到一个字体format的问题，因为不同的浏览器对字体格式支持是不一致的，这样大家有必要了解一下，各种版本的浏览器支持什么样的字体，前面也简单带到了有关字体的几种格式，下面我就分别说一下这个问题，让大家心里有一个概念： *一、TureTpe(.ttf)格式：* .ttf字体是Windows和Mac的最常见的字体，是一种RAW格式，因此他不为网站优化,支持这种字体的浏览器有【IE9+,Firefox3.5+,Chrome4+,Safari3+,Opera10+,iOS Mobile Safari4.2+】； *二、OpenType(.otf)格式：* .otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，所以也提供了更多的功能,支持这种字体的浏览器有【Firefox3.5+,Chrome4.0+,Safari3.1+,Opera10.0+,iOS Mobile Safari4.2+】； *三、Web Open Font Format(.woff)格式：* .woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离,支持这种字体的浏览器有【IE9+,Firefox3.5+,Chrome6+,Safari3.6+,Opera11.1+】； *四、Embedded Open Type(.eot)格式：* .eot字体是IE专用字体，可以从TrueType创建此格式字体,支持这种字体的浏览器有【IE4+】； *五、SVG(.svg)格式：* .svg字体是基于SVG字体渲染的一种格式,支持这种字体的浏览器有【Chrome4+,Safari3.1+,Opera10.0+,iOS Mobile Safari3.2+】。这就意味着在@font-face中我们至少需要.woff,.eot两种格式字体，甚至还需要.svg等字体达到更多种浏览版本的支持。为了使@font-face达到更多的浏览器支持，Paul Irish写了一个独特的@font-face语法叫Bulletproof @font-face: @font-face { font-family: &apos;YourWebFontName&apos;; src: url(&apos;YourWebFontName.eot?&apos;) format(&apos;eot&apos;);/*IE*/ src:url(&apos;YourWebFontName.woff&apos;) format(&apos;woff&apos;), url(&apos;YourWebFontName.ttf&apos;) format(&apos;truetype&apos;);/*non-IE*/ } 但为了让各多的浏览器支持，你也可以写成： @font-face { font-family: &apos;YourWebFontName&apos;; src: url(&apos;YourWebFontName.eot&apos;); /* IE9 Compat Modes */ src: url(&apos;YourWebFontName.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;), /* IE6-IE8 */ url(&apos;YourWebFontName.woff&apos;) format(&apos;woff&apos;), /* Modern Browsers */ url(&apos;YourWebFontName.ttf&apos;) format(&apos;truetype&apos;), /* Safari, Android, iOS */ url(&apos;YourWebFontName.svg#YourWebFontName&apos;) format(&apos;svg&apos;); /* Legacy iOS */ }","tags":[{"name":"小知识","slug":"小知识","permalink":"http://github.com/Jwenqiang/tags/小知识/"},{"name":"html","slug":"html","permalink":"http://github.com/Jwenqiang/tags/html/"}]},{"title":"Http、Tcp详解","date":"2017-04-11T01:47:33.726Z","path":"blog/http、Tcp详解20170411/","text":"Http详解 HTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的应用层通信协议。在Internet上的Web服务器上存放的都是超文本信息，客户机需要通过HTTP协议传输所要访问的超文本信息。HTTP包含命令和传输信息，不仅可用于Web访问，也可以用于其他因特网/内联网应用系统之间的通信，从而实现各类应用资源超媒体访问的集成。 当我们想浏览一个网站的时候，只要在浏览器的地址栏里输入网站的地址就可以了，例如 www.baidu.com,但是在浏览器的地址栏里面出现的却是： http://[www.baidu.com](www.baidu.com) ,你知道为什么会多出一个“http”吗？ 我们在浏览器的地址栏里输入的网站地址叫做URL (Uniform Resource Locator，统一资源定位符)。就像每家每户都有一个门牌地址一样，每个网页也都有一个Internet地址。当你在浏览器的地址框中输入一个URL或是单击一个超级链接时，URL就确定了要浏览的地址。浏览器通过超文本传输协议(HTTP)，将Web服务器上站点的网页代码提取出来，并翻译成漂亮的网页。因此，在我们认识HTTP之前，有必要先弄清楚URL的组成,例如： http://www.baidu.com/china/index.htm 。它的含义如下： 1. http://：代表超文本传输协议，通知baidu.com服务器显示Web页，通常不用输入； 2. www：代表一个Web（万维网）服务器； 3. baidu.com/：这是装有网页的服务器的域名，或站点服务器的名称； 4. China/：为该服务器上的子目录，就好像我们的文件夹； 5. Index.htm：index.htm是文件夹中的一个HTML文件（网页）。 Tcp详解 TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内[1] 另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。[1]应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（[1] MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体[1] 的TCP层。TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和… 点击这里了解更多TCP相关的知识 TCP/IP、Http、Socket的区别 网络由下往上分为 物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。 通过初步的了解，我知道IP协议对应于网络层，TCP协议对应于传输层，而HTTP协议对应于应用层， 三者从本质上来说没有可比性， socket则是对TCP/IP协议的封装和应用(程序员层面上)。 也可以说，TPC/IP协议是传输层协议，主要解决数据如何在网络中传输， 而HTTP是应用层协议，主要解决如何包装数据。 关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍： “我们在传输数据时，可以只使用(传输层)TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容。 如果想要使传输的数据有意义，则必须使用到应用层协议。 应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。 WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。” 而我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。 通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。 Socket编程接口在设计的时候，就希望也能适应其他的网络协议。 所以说，Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象， 从而形成了我们知道的一些最基本的函数接口，比如create、listen、connect、accept、send、read和write等等。 网络有一段关于socket和TCP/IP协议关系的说法比较容易理解： “TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。 这个就像操作系统会提供标准的编程接口，比如win32编程接口一样， TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。” 关于TCP/IP协议的相关只是，用博大精深来讲我想也不为过，单单查一下网上关于此类只是的资料和书籍文献的数量就知道， 这个我打算会买一些经典的书籍(比如《TCP/IP详解：卷一、卷二、卷三》)进行学习，今天就先总结一些基于基于TCP/IP协议的应用和编程接口的知识，也就是刚才说了很多的HTTP和Socket。 CSDN上有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式;Socket是发动机，提供了网络通信的能力。 实际上，传输层的TCP是基于网络层的IP协议的，而应用层的HTTP协议又是基于传输层的TCP协议的，而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口。 下面是一些经常在笔试或者面试中碰到的重要的概念，特在此做摘抄和总结。 一、什么是TCP连接的三次握手 第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认; 第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态; 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。 理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。 断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”(过程就不细写了，就是服务器和客户端交互，最终确定断开) 二、利用Socket建立网络连接的步骤 建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。 套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。 1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。 2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。 为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。 3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。 而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。 三、HTTP链接的特点 HTTP协议即超文本传送协议(Hypertext Transfer Protocol )，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。 HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。 四、TCP和UDP的区别(考得最多。。快被考烂了我觉得- -\\) 1、TCP是面向链接的，虽然说网络的不安全不稳定特性决定了多少次握手都不能保证连接的可靠性，但TCP的三次握手在最低限度上(实际上也很大程度上保证了)保证了连接的可靠性; 而UDP不是面向连接的，UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收，当然也不用重发，所以说UDP是无连接的、不可靠的一种数据传输协议。 2、也正由于1所说的特点，使得UDP的开销更小数据传输速率更高，因为不必进行收发数据的确认，所以UDP的实时性更好。 知道了TCP和UDP的区别，就不难理解为何采用TCP传输协议的MSN比采用UDP的QQ传输文件慢了，但并不能说QQ的通信是不安全的， 因为程序员可以手动对UDP的数据收发进行验证，比如发送方对每个数据包进行编号然后由接收方进行验证啊什么的， 即使是这样，UDP因为在底层协议的封装上没有采用类似TCP的“三次握手”而实现了TCP所无法达到的传输效率。","tags":[{"name":"小知识","slug":"小知识","permalink":"http://github.com/Jwenqiang/tags/小知识/"},{"name":"协议","slug":"协议","permalink":"http://github.com/Jwenqiang/tags/协议/"}]},{"title":"jquery实现iframe标签展示效果","date":"2017-04-10T02:00:15.488Z","path":"blog/jquery实现iframe效果20170410/","text":"由于iframe的众多缺点，在实现前端页面时不建议使用iframe标签 使用iframe能很好的嵌入其他的网页或者网站，但是iframe每次加载都会浪费好多的时间，且会阻止其他元素的加载，搜索引擎也不能识别页面ifram框架中被调用的链接、文本、图片等等内容的。 下面用jQuery实现iframe标签的效果Html代码&lt;ul class=&quot;list-side&quot;&gt; &lt;li&gt;&lt;a target=&quot;a.html&quot; &gt;about&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;b.html&quot; &gt;news&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target=&quot;c.html&quot; &gt;product&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://ucmic.blogspot.com/&quot; target=&quot;_blank&quot; &gt;contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div id=&quot;iframe&quot;&gt; &lt;!--jquery 插入html 位址--&gt; &lt;/div&gt; 实现功能的Javascript代码$(document).ready(function(){ $.get(&quot;a.html&quot;,function(data){ //初始將a.html include div#iframe $(&quot;#iframe&quot;).html(data); }); $(function(){ $(&apos;.list-side li&apos;).click(function() { // 找出 li 中的超链接 href(#id) var $this = $(this), _clickTab = $this.find(&apos;a&apos;).attr(&apos;target&apos;); // 找到链接a中的targer的值 $.get(_clickTab,function(data){ $(&quot;#iframe&quot;).html(data); }); }); }); })","tags":[{"name":"html","slug":"html","permalink":"http://github.com/Jwenqiang/tags/html/"},{"name":"jquery","slug":"jquery","permalink":"http://github.com/Jwenqiang/tags/jquery/"}]},{"title":"iframe的优缺点","date":"2017-04-10T01:47:04.393Z","path":"blog/iframe的优缺点20170410/","text":"HTML框架简述一个浏览器窗体可以通过几个页面的组合来显示。我们可以使用框架来完成(frames)这项工作。(框架可以把HTML文档分为多个页面) 框架页使用了表格的方式组合，可以分为数行与数列。 框架的优点 重载页面时不需要重载整个页面，只需要重载页面中的一个框架页(减少了数据的传输，加快了网页下载速度) 技术易于掌握，使用方便，使用者众多，可主要应用于不需搜索引擎来搜索的页面 方便制作导航栏 框架的缺点（iframe的缺点与frame类似） 会产生很多页面，不容易管理不容易打印（目前只能实现分框架页面的打印，不能实现对frameset的打印）浏览器的后退按钮无效（只能针对实现当前光标所在页面的前进与后退，无法实现frameset整个页面的前进与后退）代码复杂,无法被一些搜索引擎索引到（框架结构（帧结构）的不能为每个网页都设置一个标题（TITLE），更为糟糕的是，有些搜索引擎对框架结构的页面不能正确处理，会影响到搜索结果的排列名次）多数小型的移动设备（PDA 手机）无法完全显示框架多框架的页面会增加服务器的http请求 由于上面诸多缺点，因此不符合标准网页设计的理念,已经被标准网页设计抛弃，目前的html5已不再支持此标签 iframe的缺点 1、在网页中使用框架结构最大的弊病是搜索引擎的“蜘蛛”程序无法解读这种页面。当“蜘蛛”程序遇到由数个框架组成的网页时，它们只看到框架而无法找到链接，因此它们会以为该网站是个死站点，并且很快转身离去。对一个网站来说这无异于一场灾难。(如果你想销售产品，你需要客户;如想得到客户，你首先要让人们访问你的网站，而要做到这一点，你就非求助于搜索引擎不可。你花费了大量的时间、精力和金钱开设了一家网上商店，却又故意不让搜索引擎检索你，这就好象开家零售商店，却将窗户全部漆成黑色，而且还不挂任何招牌一样。) 2、框架结构有时会让人感到迷惑，特别是在几个框架中都出现上下、左右滚动条的时候。这些滚动条除了会挤占已经非常有限的页面空间外，还会分散访问者的注意力。访问者遇到这种网站往往会立刻转身离开。他们会想，既然你的主页如此混乱，那么网站的其他部分也许更不值得浏览。 3、链接导航问题。使用框架结构时，你必须保证正确设置所有的导航链接，如不然，会给访问者带来很大的麻烦。比如被链接的页面出现在导航框架内，这种情况下访问者便被陷住了，因为此时他没有其他地方可去。","tags":[{"name":"小知识","slug":"小知识","permalink":"http://github.com/Jwenqiang/tags/小知识/"},{"name":"html","slug":"html","permalink":"http://github.com/Jwenqiang/tags/html/"}]},{"title":"git基础","date":"2017-03-21T07:59:35.628Z","path":"blog/git基础20170321/","text":"git安装 首先，你可以在你的电脑上执行”git”命令，检查是否已安装git。如果已安装，则会列出它的选项和最常用的子命令。如果未安装，则打印提示未安装或不是内部/外部命令。 安装包下载地址:git.download，按需选择吧，想必凭各位多年的电脑开关机经验，QQ、浏览器、 游戏等的安装卸载经验，这步骤应该不会出现什么问题。 git的配置 安装完git，我们执行”git”命令查看它的选项和最常用的子命令。 然后就是配置你的名称及邮箱：git config --global user.name &quot;yeshou&quot; git config --global user.email &quot;xxx@qq.com&quot; 我们可以通过根目录下的.gitconfig文件查看配置信息，这里加了–global，所以是全局配置， 若其他仓库木有单独配置，则使用的是全局的，如果其他仓库需要单独配置，去掉–global重复 以上操作即可，同理，可在对应仓库文件夹下看.gitconfig文件的配置信息(友情提示，这是个隐藏文件)。 生成SSH-key 配置完了git的提交人信息，我们在本地生成个ssh-key，用来验证提交者身份。 ssh-keygen -t rsa -C &quot;xxx@qq.com&quot; 然后在.ssh文件夹下找到id_rsa.pub文件，里面内容复制到github的”setting”下的”SSH and GPG keys”的添加过程的输入框里，用以生成ssh-key。 常用操作命令git branch 创建分支 git checkout test 选择分支 git push origin test 把分支传到服务器 git branch -r -d origin/test 删除分支 git push origin :test 提交以便于删除远程分支 git merge test 合并分支 本地代码返回之前提交的版本： git log或者git reflog 显示commit-id号 git reset --hard commit-id :回滚到commit-id，讲commit-id之后提交的commit都去除 git reset --hard HEAD~3：将最近3次的提交回滚 切换分支：git checkout name 撤销修改：git checkout -- file 删除文件：git rm file 查看状态：git status 添加记录：git add file 或 git add . 添加描述：git commit -m &quot;miao shu nei rong&quot; 同步数据：git pull 提交数据：git push origin name 分支操作 查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout -b name 合并某分支到当前分支：git merge name 删除分支：git branch -d name 删除远程分支：git push origin :name","tags":[{"name":"Git","slug":"Git","permalink":"http://github.com/Jwenqiang/tags/Git/"},{"name":"基础知识","slug":"基础知识","permalink":"http://github.com/Jwenqiang/tags/基础知识/"}]},{"title":"jquery.cookie的使用方法","date":"2017-03-11T07:26:25.340Z","path":"blog/jquery.cookie使用方法20170311/","text":"一个轻量级的cookie 插件，可以读取、写入、删除 cookie。 jquery.cookie.js 的配置 首先包含jQuery的库文件，在后面包含 jquery.cookie.js 的库文件。 &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.6.2.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.cookie.js&quot;&gt;&lt;/script&gt; 使用方法 1.新添加一个会话 cookie： $.cookie(‘the_cookie’, ‘the_value’); 注：当没有指明 cookie有效时间时，所创建的cookie有效期默认到用户关闭浏览器为止，所以被称为 “会话cookie（session cookie）”。 2.创建一个cookie并设置有效时间为 7天: $.cookie(‘the_cookie’, ‘the_value’, { expires: 7 }); 注：当指明了cookie有效时间时，所创建的cookie被称为“持久 cookie （persistent cookie）”。 3.创建一个cookie并设置 cookie的有效路径： $.cookie(‘the_cookie’, ‘the_value’, { expires: 7, path: ‘/‘ }); 注：在默认情况下，只有设置 cookie的网页才能读取该 cookie。如果想让一个页面读取另一个页面设 置的cookie，必须设置cookie的路径。cookie的路径用于设置能够读取 cookie的顶级目录。将这 个路径设置为网站的根目录，可以让所有网页都能互相读取 cookie （一般不要这样设置，防止出现冲突） 。 4.读取cookie： $.cookie(‘the_cookie’); // cookie存在 =&gt; ‘the_value’ $.cookie(‘not_existing’); // cookie不存在 =&gt; null 5.删除cookie，通过传递null作为cookie的值即可： $.cookie(‘the_cookie’, null); ———-相关参数的解释————— 1).expires: 365 定义cookie的有效时间，值可以是一个数字（从创建cookie时算起，以天为单位）或一个Date 对 象。如果省略，那么创建的cookie是会话cookie，将在用户退出浏览器时被删除。 2).path: ‘/‘ 默认情况：只有设置cookie的网页才能读取该cookie。 定义cookie的有效路径。默认情况下， 该参数的值为创建 cookie 的网页所在路径（标准浏览器的行为） 。 如果你想在整个网站中访问这个cookie需要这样设置有效路径：path: ‘/‘。如果你想删除一个定义 了有效路径的 cookie，你需要在调用函数时包含这个路径:$.cookie(‘the_cookie’, null, { path: ‘/‘ });。 domain: ‘example.com’ 默认值：创建 cookie的网页所拥有的域名。 3).secure: true 默认值：false。如果为true，cookie的传输需要使用安全协议（HTTPS）。 4).raw: true 默认值：false。 默认情况下，读取和写入 cookie 的时候自动进行编码和解码（使用encodeURIComponent 编码， decodeURIComponent 解码）。要关闭这个功能设置 raw: true 即可。","tags":[{"name":"小知识","slug":"小知识","permalink":"http://github.com/Jwenqiang/tags/小知识/"},{"name":"jquery","slug":"jquery","permalink":"http://github.com/Jwenqiang/tags/jquery/"}]},{"title":"网页响应式布局","date":"2017-03-11T06:27:36.000Z","path":"blog/响应式布局20170311/","text":"网页制作响应式布局的技巧 Skill 1 学会运用 Css3 Media Queries，根据不同的屏幕分辨率，选择应用不同的Css规则Media Queries语法简介：max-width：若浏览区域的宽度小于400像素，则下方的CSS描述就会立即被套用： @media screen and (max-width:400px){ .class { background:#ccc; } } 也可以把要套用的描述独立成外部档案： &lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-width: 400px)&quot; href=&quot;mini.css&quot; /&gt; Min Width：若浏览区域的宽度大于800像素，则下方的CSS描述就会立即被套用： @media screen and (min-width:800px){ .class { background:#666; } } Device Width：若浏览设备的可视范围最大为480px，则下方的CSS描述就会立即被套用：(注：移动手机目前常见最大宽度为480px，如iPhone or Android Phone) @media screen and (max-device-width:480px){ .class { background:#000; } } 针对iPhone4提供专用的css设定档： &lt;link rel= &quot;stylesheet&quot; media= &quot;only screen and (-webkit-min-device-pixel-ratio: 2)&quot; type= &quot;text/css&quot; href= &quot;iphone4.css&quot; /&gt; 针对iPad的Portrait Mode(直立)与Landscape Mode(横躺)两种浏览模式给予不同的css设定档： &lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot; href=&quot;landscape.css&quot;&gt; Skill 2 在网页头部加上viewport标签 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; 浏览器推出了“viewport meta”标签，许多移动浏览器现在都支持这个标签，W3C 协议定义 viewport meta 目前还属于草案，很多人都會在html head 处加上 viewport 这个meta data，一个典型的移动端viewport如下所示： &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; 该属性可以控制视窗口宽度的大小。它可以被设置为实际的具体像素width= 600或为特殊设备设置宽度值。 viewport设置属性如下： width：可设定数值，或者指定为 device-width height：可设定数值，或者指定為 device-height initial-scale：第一次进入页面的初始比例 minimum-scale：允许缩小最小比例 maximum-scale：允许放大最大比例 user-scalable：允许使用者缩放，1 or 0 (yes or no)编译过程会转化成如下的语义： @viewport { width: device-width; initial-scale: 1.0 } device-width ，主要是为了让整个页面宽度与手机可视宽度相同，这样就可以简单相容于不同机型屏幕大小，如果这边width沒有设定的话，就会依照html/css给予的width当作预设值。 因为解析度不同，device-width有时候不一定是view width，所以在类似iphone 4高解析度机器上，device-width=320 ，可是实际解析度为480，这时候就需要利用javascript针对UA下去做动态调整。 user-scalable，这个属性可以让使用者能否放大、缩小页面，如果页面不允许手机使用者缩放，就直接设定0或者no，反之要启动缩放功能，就设置1或者是yes。 接下来将说明几种常用的方式，以及具体例子提供给大家參考。如果在手机端我们希望网页呈现固定，不希望使用者随意缩放，直接设定如下 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; 如果希望在不同device使用不同缩放大小，就必须使用javascript，检测UA(User agent)，动态设定viewport，如下： viewport = document.querySelector(&quot;meta[name=viewport]&quot;); viewport.setAttribute(&apos;content&apos;, &apos;width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;&apos;); Skill 3 不使用绝对宽度由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度（margin-left:5px）的布局，也不能使用具有绝对宽度(例如：width：200px)的元素,而最好使用百分比宽度width:20%;或者with:auto; Skill 4 字体最好不要用绝对大小(px)，而使用相对大小(em) body { font: normal 100% Helvetica, Arial, sans-serif; }上面的代码指定，字体大小是页面默认大小的100%，即16像素。 h1 { font-size: 1.5em; }h1的大小是默认大小的1.5倍，即24像素（24/16=1.5） .small { font-size: 0.875em; } small元素的大小是默认大小的0.875倍，即14像素（14/16=0.875） 这里顺便说说 px pt em rem区别： px是pixel，像素，是屏幕上显示数据的最基本的点，在HTML中，默认的单位就是px； pt是point，是印刷行业常用单位，等于1/72英寸。 em才是真正的“相对单位”（百分比嘛，当然是相对），而px和pt都是绝对单位（都有固定值）。所以，一般移动终端布局用em比较合适。 rem是css3的出现，同时引进新的单位,而rem是相对于根元素，这样就意味着，我们只需要在根元素确定一个参考值，在根元素中设置多大的字体，这完全可以根据您自己的需要。 Skill 5 流动布局（fluid grid）流动布局的含义是各个位置都是浮动的，不是固定不变的 .main { float: right; width: 70%; } .leftBar { float: left; width: 25%; } float的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。 Skill 6 图片的自动缩放，等比缩放 img{ max-width: 100%; }","tags":[{"name":"小知识","slug":"小知识","permalink":"http://github.com/Jwenqiang/tags/小知识/"},{"name":"网页制作","slug":"网页制作","permalink":"http://github.com/Jwenqiang/tags/网页制作/"}]},{"title":"html标签性质","date":"2017-03-11T06:04:26.000Z","path":"blog/html标签20170311/","text":"内联元素（行内元素）内联元素(inline element) a - 锚点 abbr - 缩写 acronym - 首字 b - 粗体(不推荐) bdo - bidi override big - 大字体 br - 换行 cite - 引用 code - 计算机代码(在引用源码的时候需要) dfn - 定义字段 em - 强调 font - 字体设定(不推荐) i - 斜体 img - 图片 input - 输入框 kbd - 定义键盘文本 label - 表格标签 q - 短引用 s - 中划线(不推荐) samp - 定义范例计算机代码 select - 项目选择 small - 小字体文本 span - 常用内联容器，定义文本内区块 strike - 中划线 strong - 粗体强调 sub - 下标 sup - 上标 textarea - 多行文本输入框 tt - 电传文本 u - 下划线 var - 定义变量 块元素(block element) address - 地址 blockquote - 块引用 center - 举中对齐块 dir - 目录列表 div - 常用块级容易，也是css layout的主要标签 dl - 定义列表 fieldset - form控制组 form - 交互表单 h1 - 大标题 h2 - 副标题 h3 - 3级标题 h4 - 4级标题 h5 - 5级标题 h6 - 6级标题 hr - 水平分隔线 isindex - input prompt menu - 菜单列表 noframes - frames可选内容，（对于不支持frame的浏览器显示此区块内容 noscript - ）可选脚本内容（对于不支持script的浏览器显示此内容） ol - 排序表单 p - 段落 pre - 格式化文本 table - 表格 ul - 非排序列表 可变元素可变元素为根据上下文语境决定该元素为块元素或者内联元素。 applet - java applet button - 按钮 del - 删除文本 iframe - inline frame ins - 插入的文本 map - 图片区块(map) object - object对象 script - 客户端脚本","tags":[{"name":"html","slug":"html","permalink":"http://github.com/Jwenqiang/tags/html/"},{"name":"性质","slug":"性质","permalink":"http://github.com/Jwenqiang/tags/性质/"}]},{"title":"SQL语句","date":"2017-03-10T02:54:57.000Z","path":"blog/SQL相关语句的写法20170310/","text":"SQL增删查改 增 1.1【插入单行】insert [into] &lt;表名&gt; (列名) values (列值)例：insert into Strdents (姓名,性别,出生日期) values &gt; &gt; &gt;(‘开心朋朋’,’男’,’1980/6/15’) 1.2【将现有表数据添加到一个已有表】insert into &lt;已有的新表&gt; (列名) select &lt;原表列名&gt; from &lt;原表名&gt;例：insert into tongxunlu (‘姓名’,’地址’,’电子邮件’)select name,address,emailfrom Strdents 1.3【直接拿现有表数据创建一个新表并填充】select &lt;新建表列名&gt; into &lt;新建表名&gt; from &lt;源表名&gt;例：select name,address,email into tongxunlu from strdents 1.4【使用union关键字合并数据进行插入多行】insert &lt;表名&gt; &lt;列名&gt; select &lt;列值&gt; tnion select &lt;列值&gt;例：insert Students (姓名,性别,出生日期)select ‘开心朋朋’,’男’,’1980/6/15’ union（union表示下一行）select ‘蓝色小明’,’男’,’19//**’ 删 2.1【删除&lt;满足条件的&gt;行】delete from &lt;表名&gt; [where &lt;删除条件&gt;]例：delete from a where name=’开心朋朋’（删除表a中列值为开心朋朋的行） 2.2【删除整个表】truncate table &lt;表名&gt;truncate table tongxunlu注意：删除表的所有行，但表的结构、列、约束、索引等不会被删除；不能用语有外建约束引用的表 改 update &lt;表名&gt; set &lt;列名=更新值&gt; [where &lt;更新条件&gt;]例：update tongxunlu set 年龄=18 where 姓名=’蓝色小名’ 查 &gt;4.1``精确（条件）查询select &lt;列名&gt; from &lt;表名&gt; [where &lt;查询条件表达试&gt;] [order by &lt;排序的列名&gt;[asc或desc]]4.1.1【查询所有数据行和列】例：select * from a说明：查询a表中所有行和列 &gt;4.1.2【查询部分行列–条件查询】例：select i,j,k from a where f=5说明：查询表a中f=5的所有行，并显示i,j,k３列&gt;4.1.3【在查询中使用ＡＳ更改列名】例：select name as 姓名 from a where xingbie=’男’说明：查询a表中性别为男的所有行，显示name列，并将name列改名为（姓名）显示&gt;4.1.4【查询空行】例：select name from a where email is null说明：查询表a中email为空的所有行，并显示name列；SQL语句中用is null或者is not null来判断是否为空行&gt;4.1.5【在查询中使用常量】例：select name, ‘唐山’ as 地址 from Student说明：查询表a，显示name列，并添加地址列，其列值都为’唐山’&gt;4.1.6【查询返回限制行数(关键字：top percent)】例１：select top 6 name from a说明：查询表a，显示列name的前６行，top为关键字例２：select top 60 percent name from a说明：查询表a，显示列name的60%，percent为关键字&gt;4.1.7【查询排序（关键字：order by , asc , desc）】例：select namefrom awhere chengji&gt;=60order by desc说明：查询a表中chengji大于等于60的所有行，并按降序显示name列；默认为ＡＳＣ升序 4.2``模糊查询&gt;4.2.1【使用like进行模糊查询】注意：like运算副只用于字符串，所以仅与char和varchar数据类型联合使用例：select from a where name like ‘赵%’说明：查询显示表a中，name字段第一个字为赵的记录&gt;4.2.2【使用between在某个范围内进行查询】例：select from a where nianling between 18 and 20说明：查询显示表a中nianling在18到20之间的记录&gt;4.2.3【使用in在列举值内进行查询】例：select name from a where address in (‘北京’,’上海’,’唐山’)说明：查询表a中address值为北京或者上海或者唐山的记录，显示name字段 4.3``.分组查询&gt;4.3.1【使用group by进行分组查询】例：select studentID as 学员编号,AVG(score) as 平均成绩 (注释:这里的score是列名)from score (注释:这里的score是表名)group by studentID说明：在表score中查询，按strdentID字段分组，显示strdentID字段和score字段的平均值；select语句中只允许被分组的列和为每个分组返回的一个值的表达式，例如用一个列名作为参数的聚合函数 4.3.2【使用having子句进行分组筛选】例：select studentID as 学员编号,AVG(score) as 平均成绩 (注释:这里的score是列名)from score (注释:这里的score是表名)group by studentIDhaving count(score)&gt;1说明：接上面例子，显示分组后count(score)&gt;1的行，由于where只能在没有分组时使用，分组后只能使用having来限制条件。 4.4``.多表联接查询&gt;4.4.1内联接 &gt;4.4.1.1【在where子句中指定联接条件】例：select a.name,b.chengjifrom a,bwhere a.name=b.name说明：查询表a和表b中name字段相等的记录，并显示表a中的name字段和表b中的chengji字段&gt;4.4.1.2【在from子句中使用join…on】例：select a.name,b.chengjifrom a inner join bon (a.name=b.name)说明：同上 4.4.2外联接&gt;4.4.2.1【左外联接查询】例：select s.name,c.courseID,c.scorefrom strdents as sleft outer join score as con s.scode=c.strdentID说明：在strdents表和score表中查询满足on条件的行，条件为score表的strdentID与strdents表中的sconde相同&gt;4.4.2.2【右外联接查询】例：select s.name,c.courseID,c.scorefrom strdents as sright outer join score as con s.scode=c.strdentID说明：在strdents表和score表中查询满足on条件的行，条件为strdents表中的sconde与score表的strdentID相同","tags":[{"name":"语法","slug":"语法","permalink":"http://github.com/Jwenqiang/tags/语法/"},{"name":"SQL","slug":"SQL","permalink":"http://github.com/Jwenqiang/tags/SQL/"}]},{"title":"hexo配置","date":"2017-03-10T02:54:57.000Z","path":"blog/hexo配置20170310/","text":"首先我们看看 站点配置文件 的配置 F:\\hexo_config.yml 。 # Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site 网站 title: blog #网站标题 subtitle: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。 #网站副标题 description: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。 #网站描述 author: Irving #您的名字 language: zh-CN #网站使用的语言 timezone: #网站时区。Hexo 默认使用您电脑的时区 # URL 网址 ## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 url: http://jiangwenqiang.pw permalink: :year/:month/:day/:title/ #生成文件名字的格式我改成blog/:title:year:month:day/ permalink_defaults: # Directory 目录配置 source_dir: source #源文件夹，这个文件夹用来存放内容。 public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件。 tag_dir: tags #标签文件夹 archive_dir: archives #归档文件夹 category_dir: categories #分类文件夹 code_dir: downloads/code #nclude code 文件夹 i18n_dir: :lang #国际化（i18n）文件夹 skip_render: #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 # Writing 文章 new_post_name: :title.md # 新建文章默认文件名 default_layout: post # 默认布局 titlecase: false # Transform title into titlecase external_link: true # 在新标签中打开一个外部链接，默认为true filename_case: 0 #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。 render_drafts: false #是否渲染_drafts目录下的文章，默认为false post_asset_folder: false #启动 Asset 文件夹 relative_link: false #把链接改为与根目录的相对位址，默认false future: true #显示未来的文章，默认false highlight: #代码块的设置 enable: true line_number: true auto_detect: false tab_replace: # Category &amp; Tag 分类和标签的设置 default_category: uncategorized #默认分类 category_map: #分类别名 tag_map: #标签别名 # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination 分页 ## Set per_page to 0 to disable pagination per_page: 10 #每页显示的文章量 (0 = 关闭分页功能) pagination_dir: page #分页目录 # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: next feed: type: atom #feed 类型 (atom/rss2) path: atom.xml #rss 路径 limit: 20 #在 rss 中最多生成的文章数(0显示所有) # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repository: https://github.com/Jwenqiang/Jiangwenqiang.github.com.git branch: master 主题配置文件favicon: /favicon.ico #站标 可以放在hexo文件夹下的/source里 # Set default keywords (Use a comma to separate) keywords: &quot;...&quot; #网站关键字 # Set rss to false to disable feed link. # Leave rss as empty to use site&apos;s feed link. # Set rss to specific value if you have burned your feed already. rss: #rss这里不设置 引文站点配置文件已经配置了 需要安装插件 # Specify the date when the site was setup since: 1990 #网站时间 从xx开始 类似 1990-2016 # --------------------------------------------------------------- # Menu Settings # --------------------------------------------------------------- # When running hexo in a subdirectory (e.g. domain.tld/blog) # Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; ) menu: #菜单路径设置 如果hexo在二级目录放置要去掉/ home: / archives: /archives #归档 tags: /tags #标签 categories: /categories #分类 about: /about #关于我 commonweal: /404.html #公益404 # Enable/Disable menu icons. # Icon Mapping: # Map a menu item to a specific FontAwesome icon name. # Key is the name of menu item and value is the name of FontAwsome icon. # When an question mask icon presenting up means that the item has no mapping icon. menu_icons: #icon图标 enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat # --------------------------------------------------------------- # Scheme Settings # --------------------------------------------------------------- # Schemes #next的三个scheme #scheme: Muse #scheme: Mist scheme: Pisces # --------------------------------------------------------------- # Sidebar Settings # --------------------------------------------------------------- # Social links #社交链接 social: GitHub: Weibo: Others: # Social Icons #社交的图标 social_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter Weibo: weibo # Sidebar Avatar # in theme directory(source/images): /images/avatar.jpg # in site directory(source/uploads): /uploads/avatar.jpg # default : /images/default_avatar.jpg avatar: http://7xrz9n.com1.z0.glb.clouddn.com/logo.png #头像 # TOC in the Sidebar #文章自动显示目录 toc: enable: true # Automatically add list number to toc. #目录是否自动显示数字序号 number: false # Creative Commons 4.0 International License. # http://creativecommons.org/ #自由协议 # Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero #creative_commons: by-nc-sa #creative_commons: sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggle icon. display: post #display: always #display: hide #display: remove # --------------------------------------------------------------- # Misc Theme Settings # --------------------------------------------------------------- # Custom Logo. # !!Only available for Default Scheme currently. # Options: # enabled: [true/false] - Replace with specific image # image: url-of-image - Images&apos;s url custom_logo: enabled: false image: # Code Highlight theme # Available value: # normal | night | night eighties | night blue | night bright # https://github.com/chriskempson/tomorrow-theme highlight_theme: night # Automatically scroll page to section which is under &lt;!-- more --&gt; mark. scroll_to_more: true # Automatically Excerpt auto_excerpt: enable: false length: 150 # Use Lato font use_font_lato: true # --------------------------------------------------------------- # Third Party Services Settings # --------------------------------------------------------------- # MathJax Support mathjax: # Swiftype Search API Key #swiftype_key: # Baidu Analytics ID #baidu_analytics: # Duoshuo ShortName duoshuo_shortname: ... # Disqus #disqus_shortname: # Baidu Share # Available value: # button | slide #baidushare: ## type: button # Share #jiathis: #add_this_id: # Share duoshuo_share: true # Google Webmaster tools verification setting # See: https://www.google.com/webmasters/ #google_site_verification: # Google Analytics #google_analytics: # CNZZ count #cnzz_siteid: # Make duoshuo show UA # user_id must NOT be null when admin_enable is true! # you can visit http://dev.duoshuo.com get duoshuo user id. duoshuo_info: ua_enable: true admin_enable: true user_id: ... admin_nickname: ... # Facebook SDK Support. # https://github.com/iissnan/hexo-theme-next/pull/410 facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true # Show number of visitors to each article. # You can visit https://leancloud.cn get AppID and AppKey. leancloud_visitors: enable: true app_id: QImiFijLSOHYufsazlBVlwLg-gzGzoHsz app_key: AMcYaNHy9Y5OdH42k0d4uSED # Tencent analytics ID # tencent_analytics: # Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO baidu_push: true ## 文章末尾是否显示打赏按钮 donate: enable: true text: Enjoy it ? Donate me ! 欣赏此文？求鼓励，求支持！ alipay: wechat: #! --------------------------------------------------------------- #! DO NOT EDIT THE FOLLOWING SETTINGS #! UNLESS YOU KNOW WHAT YOU ARE DOING #! --------------------------------------------------------------- # Motion use_motion: true # Fancybox fancybox: true # Static files vendors: vendors css: css js: js images: images # Theme version version: 0.5.0","tags":[{"name":"hexo","slug":"hexo","permalink":"http://github.com/Jwenqiang/tags/hexo/"},{"name":"配置","slug":"配置","permalink":"http://github.com/Jwenqiang/tags/配置/"}]},{"title":"CSS小知识","date":"2017-03-10T02:54:57.000Z","path":"blog/css小常识20170310/","text":"控制一句话长度超出隐藏显示省略号列如： .class{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;} white-space：nowrap;表示文本不会换行，在同一行继续，知道遇到标签为止； overflow：hidden;不显示超过对象尺寸的内容，就是把超出的部分隐藏了； text-overflow：ellipsis;当文本对象溢出是显示…，当然也可是设置属性为clip不显示点点点； 渐变背景的写法 background: -webkit-gradient(linear,left top,left bottom,color-stop(0,#9E9E9E),color-stop(1,#d2c9b5));（颜色代码自定义即可） null和undefined的区别 null和undefined基本是同义的，只有一些细微的差别。 null表示”没有对象”，即该处不应该有值。典型用法是： 作为函数的参数，表示该函数的参数不是对象。 作为对象原型链的终点。 Object.getPrototypeOf(Object.prototype)// null undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是： 变量被声明了，但没有赋值时，就等于undefined。调用函数时，应该提供的参数没有提供，该参数等于undefined。对象没有赋值的属性，该属性的值为undefined。函数没有返回值时，默认返回undefined。 CSS3点跳动&lt;style&gt; dot { display: inline-block; height: 1em; line-height: 1; text-align: left; vertical-align: -.25em; overflow: hidden; font-family: &quot;微软雅黑&quot;; } dot::before { display: block; content: &apos;...\\A..\\A.&apos;; white-space: pre-wrap; animation: dot 3s infinite step-start both; } @keyframes dot { 33% { transform: translateY(-2em); } 66% { transform: translateY(-1em); } } &lt;/style&gt; &lt;h1 style=&quot;font: 10rem/1.2 &apos;楷体&apos;; color: #e9ec09;&quot;&gt; &lt;dot&gt;...&lt;/dot&gt; &lt;/h1&gt;","tags":[{"name":"CSS","slug":"CSS","permalink":"http://github.com/Jwenqiang/tags/CSS/"},{"name":"小知识","slug":"小知识","permalink":"http://github.com/Jwenqiang/tags/小知识/"}]},{"title":"Markdown语法","date":"2017-03-10T02:54:57.000Z","path":"blog/Markdown语法20170310/","text":"大标题 大标题一般显示工程名,类似html的\\ 你只要在标题下面跟上=====即可 中标题 中标题一般显示重点项,类似html的\\ 你只要在标题下面输入——即可 小标题 小标题类似html的\\ 小标题的格式如下 ### 小标题 注意#和标题字符中间要有空格 注意!!!下面所有语法的提示我都先用小标题提醒了!!!单行文本框这是一个单行的文本框,只要两个Tab再输入文字即可 多行文本框这是一个有多行的文本框 你可以写入代码等,每行文字只要输入两个Tab再输入文字即可 这里你可以输入一段代码 比如我们可以在多行文本框里输入一段代码,来一个Java版本的HelloWorld吧public class HelloWorld { /** * @param args */ public static void main(String[] args) { System.out.println(&quot;HelloWorld!&quot;); } } 链接1.点击这里你可以链接到www.google.com2.点击这里我你可以链接到我的博客 只是显示图片 想点击某个图片进入一个网页,比如我想点击github的icorn然后再进入www.github.com 文字被些字符包围 文字被些字符包围 只要再文字前面加上&gt;空格即可 如果你要换行的话,新起一行,输入&gt;空格即可,后面不接文字但&gt; 只能放在行首才有效 文字被些字符包围,多重包围 文字被些字符包围开始 只要再文字前面加上&gt;空格即可 如果你要换行的话,新起一行,输入&gt;空格即可,后面不接文字 但&gt; 只能放在行首才有效 特殊字符处理有一些特殊字符如&lt;,#等,只要在特殊字符前面加上转义字符\\即可你想换行的话其实可以直接用html标签\\","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://github.com/Jwenqiang/tags/Markdown/"},{"name":"语法","slug":"语法","permalink":"http://github.com/Jwenqiang/tags/语法/"}]}]